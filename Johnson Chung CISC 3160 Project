//Johnson Chung
//CISC 3160
//Prof. Zhou
//Project

//Import and Class Declaration
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.Stack;

public class SimpleInterpreter {

    private static Map<String, Integer> variables = new HashMap<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter the program:");
        String program = scanner.nextLine();

        try {
            interpret(program);
        } catch (Exception e) {
            System.out.println("Error: " + e.getMessage());
        }

        System.out.println("Variable values after execution:");
        for (Map.Entry<String, Integer> entry : variables.entrySet()) {
            System.out.println(entry.getKey() + " = " + entry.getValue());
        }
    }

//Interpretation Logic
    private static void interpret(String program) {
        String[] assignments = program.split(";");
        for (String assignment : assignments) {
            if (!assignment.trim().isEmpty()) {
                interpretAssignment(assignment.trim());
            }
        }
    }

    private static void interpretAssignment(String assignment) {
        String[] parts = assignment.split("=");
        if (parts.length != 2) {
            throw new RuntimeException("Syntax error in assignment: " + assignment);
        }

        String variable = parts[0].trim();
        String expression = parts[1].trim();

        if (!isValidIdentifier(variable)) {
            throw new RuntimeException("Invalid identifier: " + variable);
        }

        int value = evaluateExpression(expression);
        variables.put(variable, value);
    }

//Evaluate Expression
    private static int evaluateExpression(String expression) {
        // Evaluate the expression using a simple stack-based approach
        Stack<Integer> stack = new Stack<>();
        char[] tokens = expression.toCharArray();

        for (char token : tokens) {
            if (Character.isWhitespace(token)) {
                continue;
            }

            if (Character.isDigit(token)) {
                stack.push(Character.getNumericValue(token));
            } else if (Character.isLetter(token)) {
                String identifier = "" + token;
                while ((++token) < tokens.length && (Character.isLetterOrDigit(tokens[token]) || tokens[token] == '_')) {
                    identifier += tokens[token];
                }

                if (!variables.containsKey(identifier)) {
                    throw new RuntimeException("Variable not initialized: " + identifier);
                }

                stack.push(variables.get(identifier));
            } else if (token == '+') {
                performOperation(stack, '+');
            } else if (token == '-') {
                performOperation(stack, '-');
            } else if (token == '*') {
                performOperation(stack, '*');
            } else if (token == '(') {
                stack.push((int) token);
            } else if (token == ')') {
                int result = evaluateStack(stack);
                stack.pop(); // Pop '('
                stack.push(result);
            }
        }

        return evaluateStack(stack);
    }

    private static void performOperation(Stack<Integer> stack, char operator) {
        int operand2 = stack.pop();
        int operand1 = stack.pop();

        switch (operator) {
            case '+':
                stack.push(operand1 + operand2);
                break;
            case '-':
                stack.push(operand1 - operand2);
                break;
            case '*':
                stack.push(operand1 * operand2);
                break;
        }
    }

    private static int evaluateStack(Stack<Integer> stack) {
        int result = 0;
        while (!stack.isEmpty()) {
            result += stack.pop();
        }
        return result;
    }

//Identifier Validation
    private static boolean isValidIdentifier(String identifier) {
        return identifier.matches("[a-zA-Z_][a-zA-Z0-9_]*");
    }
}
